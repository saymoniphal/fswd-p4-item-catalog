#!/bin/bash/env python3

from sqlalchemy import create_engine 
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Sequence, ForeignKey
from sqlalchemy.orm import relationship

Base = declarative_base()


class User(Base):
    """Represents 'users' table in the database with attributes:
    user_id: the id number of the user (generated by the DB)
    name: name of the user
    email: email address of the user
    """

    # table name in the database
    __tablename__ = 'users'

    # attributes which corespond to each column in the table
    user_id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
    name = Column(String(50), nullable=False)
    email = Column(String(50), nullable=False)


class Category(Base):
    """Class represents table 'category' in the database which has attributes:
    name: name of the category
    description: description in text of the category
    category_id: the id number of the category
                (incrementally assigned by the database)
    user_id: the id number of the user created the category (foreign key)
    """

    # table name in the database
    __tablename__ = 'categories'

    # attributes which represents each column in the table
    category_id = Column(Integer, Sequence('category_id_seq'),
                         primary_key=True)
    name = Column(String(50), nullable=False)
    description = Column(String(255))
    user_id = Column(Integer, ForeignKey('users.user_id'))
    user = relationship(User)

    @property
    def serialize(self):
        """Return object data in easily serialize format"""
        return {
                 'name': self.name,
                 'description': self.description,
                 'user_id': self.user_id,
                 'category_id': self.category_id,
               }


class Item(Base):
    """Class represents table 'item' in the database which has attributes:
    name: name of the item, it should not be empty
    description: description in text of the item
    item_id: the id number of the item (incrementally assigned by the database)
    category_id: the id number of the category (refer to categories)
    user_id: the id number of the user created the category (foreign key)
    """

    # table name in the database
    __tablename__ = 'items'

    # attributes which represents each column in the table
    item_id = Column(Integer, Sequence('item_id_seq'), primary_key=True)
    name = Column(String(50), nullable=False)
    description = Column(String(255))
    category_id = Column(Integer, ForeignKey('categories.category_id'))
    category = relationship(Category)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    user = relationship(User)


engine = create_engine('sqlite:///itemcatalog.db')


Base.metadata.create_all(engine)
